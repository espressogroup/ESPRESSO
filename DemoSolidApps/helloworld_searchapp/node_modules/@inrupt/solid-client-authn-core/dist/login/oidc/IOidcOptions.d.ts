/// <reference types="node" />
/**
 * @hidden
 * @packageDocumentation
 */
/**
 * Defines how OIDC login should proceed
 */
import type { EventEmitter } from "events";
import type { IIssuerConfig } from "./IIssuerConfig";
import type { IClient } from "./IClient";
/**
 * @hidden
 */
export interface IOidcOptions {
    /**
     * The URL of the Solid Identity Provider.
     */
    issuer: string;
    /**
     * The openid-configuration of the issuer.
     */
    issuerConfiguration: IIssuerConfig;
    client: IClient;
    sessionId: string;
    refreshToken?: string;
    /**
     * Specify whether the Solid Identity Provider may, or may not, interact with the user (for example,
     * the normal login process **_requires_** human interaction for them to enter their credentials,
     * but if a user simply refreshes the current page in their browser, we'll want to log them in again
     * automatically, i.e., without prompting them to manually provide their credentials again).
     */
    prompt?: string;
    /**
     * True if a DPoP compatible auth_token should be requested.
     */
    dpop: boolean;
    /**
     * The URL to which the user should be redirected after logging in the Solid
     * Identity Provider and authorizing the app to access data in their stead.
     * The client credentials grant doesn't require a redirect.
     */
    redirectUrl?: string;
    handleRedirect?: (url: string) => unknown;
    eventEmitter?: EventEmitter;
}
export default IOidcOptions;
